// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WM.Persistence;

#nullable disable

namespace WM.Persistence.Migrations
{
    [DbContext(typeof(WmDbContext))]
    [Migration("20250804075018_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WM.Domain.Entities.AdmissionDocEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ShippingResId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number");

                    b.HasIndex("ShippingResId");

                    b.ToTable("AdmissionDocs");
                });

            modelBuilder.Entity("WM.Domain.Entities.AdmissionResEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasurementId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("AdmissionResEntity");
                });

            modelBuilder.Entity("WM.Domain.Entities.BalanceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasurementId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("WM.Domain.Entities.ClientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("WM.Domain.Entities.ResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("WM.Domain.Entities.ShippingDocEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ShippingResId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShippingResId");

                    b.ToTable("ShippingDocs");
                });

            modelBuilder.Entity("WM.Domain.Entities.ShippingResEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasurementId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("ShippingResEntity");
                });

            modelBuilder.Entity("WM.Domain.Entities.UnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnitsOfMeasurement");
                });

            modelBuilder.Entity("WM.Domain.Entities.AdmissionDocEntity", b =>
                {
                    b.HasOne("WM.Domain.Entities.AdmissionResEntity", "ShippingRes")
                        .WithMany()
                        .HasForeignKey("ShippingResId");

                    b.Navigation("ShippingRes");
                });

            modelBuilder.Entity("WM.Domain.Entities.AdmissionResEntity", b =>
                {
                    b.HasOne("WM.Domain.Entities.ResourceEntity", "Resource")
                        .WithMany("AdmissionMovements")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WM.Domain.Entities.UnitEntity", "UnitOfMeasurement")
                        .WithMany("AdmissionMovements")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("WM.Domain.Entities.BalanceEntity", b =>
                {
                    b.HasOne("WM.Domain.Entities.ResourceEntity", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WM.Domain.Entities.UnitEntity", "UnitOfMeasurement")
                        .WithMany("Balances")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("WM.Domain.Entities.ShippingDocEntity", b =>
                {
                    b.HasOne("WM.Domain.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Domain.Entities.ShippingResEntity", "ShippingRes")
                        .WithMany()
                        .HasForeignKey("ShippingResId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ShippingRes");
                });

            modelBuilder.Entity("WM.Domain.Entities.ShippingResEntity", b =>
                {
                    b.HasOne("WM.Domain.Entities.ResourceEntity", "Resource")
                        .WithMany("ShippingMovements")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WM.Domain.Entities.UnitEntity", "UnitOfMeasurement")
                        .WithMany("ShippingMovements")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("WM.Domain.Entities.ResourceEntity", b =>
                {
                    b.Navigation("AdmissionMovements");

                    b.Navigation("Balances");

                    b.Navigation("ShippingMovements");
                });

            modelBuilder.Entity("WM.Domain.Entities.UnitEntity", b =>
                {
                    b.Navigation("AdmissionMovements");

                    b.Navigation("Balances");

                    b.Navigation("ShippingMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
